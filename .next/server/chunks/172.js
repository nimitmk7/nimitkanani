"use strict";exports.id=172,exports.ids=[172],exports.modules={19172:(e,r,n)=>{n.d(r,{ApolloServerPluginInlineTrace:()=>a});var l=n(23666),t=n(21731),i=n(69480),s=n(13781);function a(e=Object.create(null)){let r=!e.__onlyIfSchemaIsSubgraph||null;return(0,i.U)({__internal_plugin_id__:"InlineTrace",__is_disabled_plugin__:!1,async serverWillStart({schema:e,logger:n}){null===r&&(r=(0,s.X)(e))&&n.info("Enabling inline tracing for this subgraph. To disable, use ApolloServerPluginInlineTraceDisabled.")},async requestDidStart({request:{http:n},metrics:i}){if(!r)return;let s=new t.X({maskedBy:"ApolloServerPluginInlineTrace",sendErrors:e.includeErrors});if(n?.headers.get("apollo-federation-include-trace")==="ftv1"&&!1!==i.captureTraces)return i.captureTraces=!0,s.startTiming(),{executionDidStart:async()=>({willResolveField:({info:e})=>s.willResolveField(e)}),async didEncounterErrors({errors:e}){s.didEncounterErrors(e)},async willSendResponse({response:e}){if(s.stopTiming(),"incremental"===e.body.kind)return;i.queryPlanTrace&&(s.trace.queryPlan=i.queryPlanTrace);let r=l.fM.encode(s.trace).finish(),n=Buffer.from(r,r.byteOffset,r.byteLength),t=e.body.singleResult.extensions||(e.body.singleResult.extensions=Object.create(null));if(void 0!==t.ftv1)throw Error("The `ftv1` extension was already present.");t.ftv1=n.toString("base64")}}}})}}};