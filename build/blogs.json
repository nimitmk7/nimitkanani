{
  "status": "ok",
  "feed": {
    "url": "https://medium.com/feed/@nimitmk7",
    "title": "Stories by Nimit Kanani on Medium",
    "link": "https://medium.com/@nimitmk7?source=rss-171152f24119------2",
    "author": "",
    "description": "Stories by Nimit Kanani on Medium",
    "image": "https://cdn-images-1.medium.com/fit/c/150/150/1*_ou7CfVJi7lKnVPkc58Scw.jpeg"
  },
  "items": [
    {
      "title": "Building Omnicode: An AI-powered coding assistant",
      "pubDate": "2025-03-07 18:59:02",
      "link": "https://medium.com/@nimitmk7/building-omnicode-an-ai-powered-coding-assistant-479cdc625afa?source=rss-171152f24119------2",
      "guid": "https://medium.com/p/479cdc625afa",
      "author": "Nimit Kanani",
      "thumbnail": "",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/626/0*mvQmIAYl-g_Bi9wT.jpg\"><figcaption>Credit: Google\u00a0Images</figcaption></figure><p>Coding assistants like Github Copilot and Codeium are being widely used in IDEs today by developers to speed up the development process, improve code quality, debug faster, etc., thus improving the overall productivity of the developer.</p>\n<p>They support features like code autocompletion, code refactoring, code documentation generation, suggestions for fixing errors, and an interactive chat feature. They work with multiple languages and integrate seamlessly with IDEs like VSCode, IntelliJ IDEA,\u00a0etc.</p>\n<p>I was always fascinated by them, so my team decided to build a small and cool prototype.</p>\n<p><em>In this article, I\u2019ll walk you through how my team built a prototype of an AI-powered coding assistant.</em></p>\n<p><strong>Team Members</strong>: <a href=\"https://www.linkedin.com/in/nimit-kanani/\">Nimit Kanani</a>, <a href=\"https://www.linkedin.com/in/zayaanra/\">Zayaan Rahman</a>, <a href=\"https://www.linkedin.com/in/dc1998/\">Deepak Chaurasiya</a>, <a href=\"https://www.linkedin.com/in/samkitshah18/\">Samkit\u00a0Shah</a></p>\n<h3>Features</h3>\n<p>Omnicode supports 4 features:</p>\n<ol>\n<li>Suggest Code Completions</li>\n<li>Refactor Existing\u00a0Code</li>\n<li>Generate Documentation</li>\n<li>Personal Usage Analytics</li>\n</ol>\n<p>We chose these 4 features because they are the most frequently used features of coding assistants.</p>\n<h3>Architecture</h3>\n<p>Omnicode is hosted on the Amazon Web Services(AWS) platform, and it heavily relies on connecting different AWS services.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BFjcGa74BSLgs1rb9oJ6Ew.png\"><figcaption>Omnicode architecture overview</figcaption></figure><p>The details of the services and their use in Omnicode:</p>\n<ul>\n<li>\n<strong>Cognito</strong>: User authentication</li>\n<li>\n<strong>S3</strong>: Hosting the static website for the analytics dashboard.</li>\n<li>\n<strong>API Gateway</strong>: Acts as the entry point for API requests and routes the API requests to the appropriate Lambda function.</li>\n<li>\n<strong>Lambda</strong>: Execute the core logic for code completion, documentation generation, code refactoring, and metrics collection.</li>\n<li>\n<strong>SageMaker</strong>: Hosting the inference endpoint for our AI model(Meta CodeLlama 70B), which powers the AI-driven features.</li>\n<li>\n<strong>EventBridge</strong>: Schedule the transfer of metrics data from SQS to DynamoDB via the Metrics Lambda function.</li>\n<li>\n<strong>DynamoDB</strong>: Storing usage metrics, which are used for generating usage dashboard statistics.</li>\n<li>\n<strong>SQS</strong>: Queues metrics events asynchronously to reduce write load on DynamoDB.</li>\n</ul>\n<h3>Implementation Details</h3>\n<h4>Authentication</h4>\n<p>Users register using an email and password, which are stored securely in AWS Cognito. Tokens generated by Cognito enable secure access to Omnicode\u2019s features.</p>\n<h4>Request fulfillment</h4>\n<p>The Omnicode API is hosted on the AWS API gateway. There are 4 API routes for the 4 features(code completion, code refactor, and code documentation generation). All the routes are connected to their own Lambda function. This helps all the features scale independently.</p>\n<p>The Lambdas for the code completion, refactoring, or documentation communicate with AWS Sagemaker with their respective prompts and tuned generation parameters.</p>\n<h4>AI Model</h4>\n<p>The AI model behind Omnicode is <strong>Meta CodeLlama 70B</strong>, a state-of-the-art LLM for coding. Code Llama is a state-of-the-art LLM capable of generating code, and natural language about code, from both code and natural language prompts, which is why it was the best choice for our use-case.</p>\n<h4>Metrics Collection and\u00a0Storage</h4>\n<p>After completing a request, the Lambda function logs its details in SQS. Amazon EventBridge then schedules a batch-write to DynamoDB every hour. This system helps with the asynchronous processing of\u00a0metrics.</p>\n<h4>Analytics Dashboard</h4>\n<p>A lightweight, static website hosted on <strong>AWS S3</strong> displays user metrics, including:</p>\n<ol>\n<li>Total bytes processed by\u00a0Omnicode</li>\n<li>Language distribution (pie\u00a0chart)</li>\n<li>Feature usage frequency (bar\u00a0chart)</li>\n</ol>\n<p>For fetching the data to be displayed on the dashboard, the extension calls the metrics collection API, which pulls the usage data from DynamoDB.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YcuGKxfYUbDLMkJz\"><figcaption>Omnicode usage dashboard</figcaption></figure><h4>VSCode Extension</h4>\n<p>Registration and logging in are all implemented through a right-click menu. For both, users must only supply a valid email and a valid password.</p>\n<p>After logging in, Cognito returns several tokens (ID token, access token, and refresh token). These tokens are safely stored in VSCode\u2019s default global\u00a0storage.</p>\n<p>Code completion works by only activating after 3 seconds of user inactivity. When the user does not type for 3 seconds, a request is made to API Gateway, which in turn invokes a Lambda function that fetches LLM\u00a0results.</p>\n<p>Documentation generation is straightforward. It works by allowing the user to select some amount of text and opening up the right-click menu. The menu will have an option to generate a docstring for the selected text. Similarly to code completion, a request is made, and the results are immediately inserted before the selected\u00a0text.</p>\n<p>Code refactoring works the same way as documentation generation. The user selects some text and requests a refactor through the<br>right-click menu. The selected text will then be replaced with the new refactored code.</p>\n<p>The personalized dashboard is also accessible through the right-click menu. It can only be accessed if the user is authenticated with\u00a0Cognito.</p>\n<h3>Performance and Possible Improvements</h3>\n<p>The coding features\u2019 API requests are quite high latency, and the major bottleneck is actually at the SageMaker endpoint. Some potential problems and their potential improvements are\u00a0:</p>\n<ol>\n<li>\n<strong>Model size</strong>: We chose the 70 B model because its responses were the most accurate, but a bigger model like that results in a relatively higher inference latency. The latency goes up linearly with the number of tokens passed as context. Techniques like pruning, quantization, or knowledge distillation can significantly reduce model size and improve response\u00a0times.</li>\n<li>\n<strong>Instance Type</strong>: We chose the bare minimum instance type of node in Sagemaker, but by choosing a higher and more suitable instance type, the inference latency can be improved.</li>\n</ol>\n<h3>Video demonstration</h3>\n<p>Watch our video demonstration, where Zayaan Rahman walks through Omnicode\u2019s features in\u00a0action.</p>\n<a href=\"https://medium.com/media/e3d18f2c0699cb4c1cc0a5fdcd952790/href\">https://medium.com/media/e3d18f2c0699cb4c1cc0a5fdcd952790/href</a><p>Thank you for reading till the end. If you have any questions about this prototype or want to collaborate on future projects, reach out to me at <a href=\"http://nimitmk7@gmail.com/\">nimitmk7@gmail.com</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=479cdc625afa\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/626/0*mvQmIAYl-g_Bi9wT.jpg\"><figcaption>Credit: Google\u00a0Images</figcaption></figure><p>Coding assistants like Github Copilot and Codeium are being widely used in IDEs today by developers to speed up the development process, improve code quality, debug faster, etc., thus improving the overall productivity of the developer.</p>\n<p>They support features like code autocompletion, code refactoring, code documentation generation, suggestions for fixing errors, and an interactive chat feature. They work with multiple languages and integrate seamlessly with IDEs like VSCode, IntelliJ IDEA,\u00a0etc.</p>\n<p>I was always fascinated by them, so my team decided to build a small and cool prototype.</p>\n<p><em>In this article, I\u2019ll walk you through how my team built a prototype of an AI-powered coding assistant.</em></p>\n<p><strong>Team Members</strong>: <a href=\"https://www.linkedin.com/in/nimit-kanani/\">Nimit Kanani</a>, <a href=\"https://www.linkedin.com/in/zayaanra/\">Zayaan Rahman</a>, <a href=\"https://www.linkedin.com/in/dc1998/\">Deepak Chaurasiya</a>, <a href=\"https://www.linkedin.com/in/samkitshah18/\">Samkit\u00a0Shah</a></p>\n<h3>Features</h3>\n<p>Omnicode supports 4 features:</p>\n<ol>\n<li>Suggest Code Completions</li>\n<li>Refactor Existing\u00a0Code</li>\n<li>Generate Documentation</li>\n<li>Personal Usage Analytics</li>\n</ol>\n<p>We chose these 4 features because they are the most frequently used features of coding assistants.</p>\n<h3>Architecture</h3>\n<p>Omnicode is hosted on the Amazon Web Services(AWS) platform, and it heavily relies on connecting different AWS services.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BFjcGa74BSLgs1rb9oJ6Ew.png\"><figcaption>Omnicode architecture overview</figcaption></figure><p>The details of the services and their use in Omnicode:</p>\n<ul>\n<li>\n<strong>Cognito</strong>: User authentication</li>\n<li>\n<strong>S3</strong>: Hosting the static website for the analytics dashboard.</li>\n<li>\n<strong>API Gateway</strong>: Acts as the entry point for API requests and routes the API requests to the appropriate Lambda function.</li>\n<li>\n<strong>Lambda</strong>: Execute the core logic for code completion, documentation generation, code refactoring, and metrics collection.</li>\n<li>\n<strong>SageMaker</strong>: Hosting the inference endpoint for our AI model(Meta CodeLlama 70B), which powers the AI-driven features.</li>\n<li>\n<strong>EventBridge</strong>: Schedule the transfer of metrics data from SQS to DynamoDB via the Metrics Lambda function.</li>\n<li>\n<strong>DynamoDB</strong>: Storing usage metrics, which are used for generating usage dashboard statistics.</li>\n<li>\n<strong>SQS</strong>: Queues metrics events asynchronously to reduce write load on DynamoDB.</li>\n</ul>\n<h3>Implementation Details</h3>\n<h4>Authentication</h4>\n<p>Users register using an email and password, which are stored securely in AWS Cognito. Tokens generated by Cognito enable secure access to Omnicode\u2019s features.</p>\n<h4>Request fulfillment</h4>\n<p>The Omnicode API is hosted on the AWS API gateway. There are 4 API routes for the 4 features(code completion, code refactor, and code documentation generation). All the routes are connected to their own Lambda function. This helps all the features scale independently.</p>\n<p>The Lambdas for the code completion, refactoring, or documentation communicate with AWS Sagemaker with their respective prompts and tuned generation parameters.</p>\n<h4>AI Model</h4>\n<p>The AI model behind Omnicode is <strong>Meta CodeLlama 70B</strong>, a state-of-the-art LLM for coding. Code Llama is a state-of-the-art LLM capable of generating code, and natural language about code, from both code and natural language prompts, which is why it was the best choice for our use-case.</p>\n<h4>Metrics Collection and\u00a0Storage</h4>\n<p>After completing a request, the Lambda function logs its details in SQS. Amazon EventBridge then schedules a batch-write to DynamoDB every hour. This system helps with the asynchronous processing of\u00a0metrics.</p>\n<h4>Analytics Dashboard</h4>\n<p>A lightweight, static website hosted on <strong>AWS S3</strong> displays user metrics, including:</p>\n<ol>\n<li>Total bytes processed by\u00a0Omnicode</li>\n<li>Language distribution (pie\u00a0chart)</li>\n<li>Feature usage frequency (bar\u00a0chart)</li>\n</ol>\n<p>For fetching the data to be displayed on the dashboard, the extension calls the metrics collection API, which pulls the usage data from DynamoDB.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YcuGKxfYUbDLMkJz\"><figcaption>Omnicode usage dashboard</figcaption></figure><h4>VSCode Extension</h4>\n<p>Registration and logging in are all implemented through a right-click menu. For both, users must only supply a valid email and a valid password.</p>\n<p>After logging in, Cognito returns several tokens (ID token, access token, and refresh token). These tokens are safely stored in VSCode\u2019s default global\u00a0storage.</p>\n<p>Code completion works by only activating after 3 seconds of user inactivity. When the user does not type for 3 seconds, a request is made to API Gateway, which in turn invokes a Lambda function that fetches LLM\u00a0results.</p>\n<p>Documentation generation is straightforward. It works by allowing the user to select some amount of text and opening up the right-click menu. The menu will have an option to generate a docstring for the selected text. Similarly to code completion, a request is made, and the results are immediately inserted before the selected\u00a0text.</p>\n<p>Code refactoring works the same way as documentation generation. The user selects some text and requests a refactor through the<br>right-click menu. The selected text will then be replaced with the new refactored code.</p>\n<p>The personalized dashboard is also accessible through the right-click menu. It can only be accessed if the user is authenticated with\u00a0Cognito.</p>\n<h3>Performance and Possible Improvements</h3>\n<p>The coding features\u2019 API requests are quite high latency, and the major bottleneck is actually at the SageMaker endpoint. Some potential problems and their potential improvements are\u00a0:</p>\n<ol>\n<li>\n<strong>Model size</strong>: We chose the 70 B model because its responses were the most accurate, but a bigger model like that results in a relatively higher inference latency. The latency goes up linearly with the number of tokens passed as context. Techniques like pruning, quantization, or knowledge distillation can significantly reduce model size and improve response\u00a0times.</li>\n<li>\n<strong>Instance Type</strong>: We chose the bare minimum instance type of node in Sagemaker, but by choosing a higher and more suitable instance type, the inference latency can be improved.</li>\n</ol>\n<h3>Video demonstration</h3>\n<p>Watch our video demonstration, where Zayaan Rahman walks through Omnicode\u2019s features in\u00a0action.</p>\n<a href=\"https://medium.com/media/e3d18f2c0699cb4c1cc0a5fdcd952790/href\">https://medium.com/media/e3d18f2c0699cb4c1cc0a5fdcd952790/href</a><p>Thank you for reading till the end. If you have any questions about this prototype or want to collaborate on future projects, reach out to me at <a href=\"http://nimitmk7@gmail.com/\">nimitmk7@gmail.com</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=479cdc625afa\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {},
      "categories": [
        "sagemaker",
        "coding-assistant",
        "ai",
        "vscode-extension",
        "large-language-models"
      ]
    },
    {
      "title": "From Flaw to Fuel",
      "pubDate": "2024-07-18 00:53:46",
      "link": "https://medium.com/@nimitmk7/from-flaw-to-fuel-c1157cca21ee?source=rss-171152f24119------2",
      "guid": "https://medium.com/p/c1157cca21ee",
      "author": "Nimit Kanani",
      "thumbnail": "",
      "description": "\n<h3>From Flaw to Fuel: How Your Weakness Can Be a Superpower</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/350/1*qi8PsP17ATUkpzJ1iOzeCw.jpeg\"><figcaption>Superman!! by <a href=\"https://www.alexrossart.com/\">Alex\u00a0Ross</a>.</figcaption></figure><blockquote>\n<strong>\u201cYour weakness can be your biggest strength.\u201d <br>\u200a\u2014\u200a</strong>Patrick Mouratoglou</blockquote>\n<p>I heard this line being said by the legendary Tennis Coach, Patrick Mouratoglou in the series \u2018The Playbook\u2019 on Netflix. It got me thinking hard. At first glance, it didn\u2019t make sense because the words strength and weakness are antonyms.</p>\n<p>How can something be your strength as well as your weakness? But pondering over it for some days, I came across 3 anecdotes that helped me understand the meaning behind this statement, and get a direction of how this can be implemented in our\u00a0lives.</p>\n<h3><strong>A tale of\u00a0diabetes</strong></h3>\n<p>My younger brother is a Type 1 Diabetic, so his biggest physical weakness is that his body can\u2019t produce insulin hormones and regulate his sugar levels on its own. So he injects insulin three times a day in his body. But how can this weakness be converted into his strength?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*9Jjc5r7MvvvtUK7QgYdxhA.jpeg\"><figcaption>A diabetes patient injecting Insulin. Image Credits: <a href=\"https://diabetesvoice.org/\">https://diabetesvoice.org/</a></figcaption></figure><p>Due to this chronic disorder, he has to refrain from eating food that has any trace of refined sugar. This means letting go of most of the sweet treats and desserts we commonly savor. Now this is a lost privilege/luxury, but refined sugar is one of the biggest poisons and addictions in today\u2019s age. So on the flip side, his body is completely avoiding all the potential damage caused to our bodies by refined\u00a0sugar.</p>\n<p>Apart from that, he has to keep his diet very healthy, he has to eat his meals on time and in reasonable portions. He has to sleep on time, wake up on time, and exercise regularly. Following all this helps him regulate his blood sugar levels. Isn\u2019t this the lifestyle most of us want to follow and health experts prescribe as well? The benefits of such a lifestyle are immense, from boosting immunity to increasing longevity. Despite being a type 1 diabetic, he is a great Badminton player, and long-distance runner and has completed treks in the Himalayas.</p>\n<p>So that is how he converted his weakness into a strength, from a disorder to a lifestyle whose benefits he will be reaping for\u00a0life.</p>\n<h3><strong>A personal discovery</strong></h3>\n<p>Throughout my academic and professional career, I naturally realized I lagged in understanding some topics, whereas my peers were very comfortable in dealing with those concepts.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/626/1*_DR8v9tW6EfXu0GXJdWu1w.jpeg\"></figure><p>Over time, I realized that 3 of my biggest hidden abilities were:</p>\n<p>The ability to ask really good and specific questions, the ability to admit I didn\u2019t understand something without hesitation or pride, and the ability to not be satisfied till I understand a concept to the\u00a0core.</p>\n<p>These abilities always led to me spending extra hours and effort, both in understanding concepts as well as practicing them.</p>\n<p>But on the upside, over time I ended up understanding such concepts in more depth than other people, while also exploring the nuances, tradeoffs, and practical considerations of whatever I\u00a0learned.</p>\n<p>So that way, I converted my weakness of not being able to understand some concepts easily, to change my strategy and in turn learn those concepts in more nuance and\u00a0detail.</p>\n<h3><strong>The one-armed Judo\u00a0Champion</strong></h3>\n<p>This is a tale about a boy who was born without a right arm. On his ninth birthday, he asked his parents if he could join a Judo club. They were delighted by the idea and the boy quickly became a regular at the local Judo\u00a0club.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*MivVkFkS41JTdWuNtY1zwQ.jpeg\"></figure><p>The boy dreamt of competing in a tournament and asked his master if this was possible. The master said he could but only if he listened carefully and trusted\u00a0him.</p>\n<p>The master taught the boy one move and one move only. The boy practiced it diligently but after a while, he was worried that the other boys were learning a range of moves and he only had one. He would repeatedly urge the master to teach him other moves but the master always said NO. The master just urged the boy to keep practicing that one move and emphasized that he needed only that move. So the boy kept practicing the move and mastered it after a few\u00a0months.</p>\n<p>Several months later, the master took the boy to a tournament. The boy won the first round of the tournament and then the next round and the one after that. Eventually, he won the entire tournament. And surprisingly it did not prove to be very difficult for\u00a0him.</p>\n<p>The boy was baffled. How did he do\u00a0it?</p>\n<p>Curious, he asked the master how a boy with only one arm and only one move could win a karate tournament. The master smiled and told the boy that the attacking move he had mastered was one of the most difficult ones in Judo. There was only one possible defense against that move: grabbing the attacker by the right\u00a0arm.</p>\n<h3>Conclusion</h3>\n<p>So, the next time you find yourself frustrated by a personal limitation, remember: that it might just be the seed of your next superpower.</p>\n<p>Embrace it, work with it, and let it fuel your journey to excellence. After all, in the grand tapestry of life, it\u2019s often our flaws that make us truly exceptional.</p>\n<p>A big shoutout to Anam Namazi for her valuable review of this\u00a0article.</p>\n<p>If you loved reading this piece, do hit the follow button and shower some\u00a0claps.</p>\n<p>For any suggestions/feedback, write me at my email: nimitmk7@gmail.com.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c1157cca21ee\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<h3>From Flaw to Fuel: How Your Weakness Can Be a Superpower</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/350/1*qi8PsP17ATUkpzJ1iOzeCw.jpeg\"><figcaption>Superman!! by <a href=\"https://www.alexrossart.com/\">Alex\u00a0Ross</a>.</figcaption></figure><blockquote>\n<strong>\u201cYour weakness can be your biggest strength.\u201d <br>\u200a\u2014\u200a</strong>Patrick Mouratoglou</blockquote>\n<p>I heard this line being said by the legendary Tennis Coach, Patrick Mouratoglou in the series \u2018The Playbook\u2019 on Netflix. It got me thinking hard. At first glance, it didn\u2019t make sense because the words strength and weakness are antonyms.</p>\n<p>How can something be your strength as well as your weakness? But pondering over it for some days, I came across 3 anecdotes that helped me understand the meaning behind this statement, and get a direction of how this can be implemented in our\u00a0lives.</p>\n<h3><strong>A tale of\u00a0diabetes</strong></h3>\n<p>My younger brother is a Type 1 Diabetic, so his biggest physical weakness is that his body can\u2019t produce insulin hormones and regulate his sugar levels on its own. So he injects insulin three times a day in his body. But how can this weakness be converted into his strength?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*9Jjc5r7MvvvtUK7QgYdxhA.jpeg\"><figcaption>A diabetes patient injecting Insulin. Image Credits: <a href=\"https://diabetesvoice.org/\">https://diabetesvoice.org/</a></figcaption></figure><p>Due to this chronic disorder, he has to refrain from eating food that has any trace of refined sugar. This means letting go of most of the sweet treats and desserts we commonly savor. Now this is a lost privilege/luxury, but refined sugar is one of the biggest poisons and addictions in today\u2019s age. So on the flip side, his body is completely avoiding all the potential damage caused to our bodies by refined\u00a0sugar.</p>\n<p>Apart from that, he has to keep his diet very healthy, he has to eat his meals on time and in reasonable portions. He has to sleep on time, wake up on time, and exercise regularly. Following all this helps him regulate his blood sugar levels. Isn\u2019t this the lifestyle most of us want to follow and health experts prescribe as well? The benefits of such a lifestyle are immense, from boosting immunity to increasing longevity. Despite being a type 1 diabetic, he is a great Badminton player, and long-distance runner and has completed treks in the Himalayas.</p>\n<p>So that is how he converted his weakness into a strength, from a disorder to a lifestyle whose benefits he will be reaping for\u00a0life.</p>\n<h3><strong>A personal discovery</strong></h3>\n<p>Throughout my academic and professional career, I naturally realized I lagged in understanding some topics, whereas my peers were very comfortable in dealing with those concepts.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/626/1*_DR8v9tW6EfXu0GXJdWu1w.jpeg\"></figure><p>Over time, I realized that 3 of my biggest hidden abilities were:</p>\n<p>The ability to ask really good and specific questions, the ability to admit I didn\u2019t understand something without hesitation or pride, and the ability to not be satisfied till I understand a concept to the\u00a0core.</p>\n<p>These abilities always led to me spending extra hours and effort, both in understanding concepts as well as practicing them.</p>\n<p>But on the upside, over time I ended up understanding such concepts in more depth than other people, while also exploring the nuances, tradeoffs, and practical considerations of whatever I\u00a0learned.</p>\n<p>So that way, I converted my weakness of not being able to understand some concepts easily, to change my strategy and in turn learn those concepts in more nuance and\u00a0detail.</p>\n<h3><strong>The one-armed Judo\u00a0Champion</strong></h3>\n<p>This is a tale about a boy who was born without a right arm. On his ninth birthday, he asked his parents if he could join a Judo club. They were delighted by the idea and the boy quickly became a regular at the local Judo\u00a0club.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*MivVkFkS41JTdWuNtY1zwQ.jpeg\"></figure><p>The boy dreamt of competing in a tournament and asked his master if this was possible. The master said he could but only if he listened carefully and trusted\u00a0him.</p>\n<p>The master taught the boy one move and one move only. The boy practiced it diligently but after a while, he was worried that the other boys were learning a range of moves and he only had one. He would repeatedly urge the master to teach him other moves but the master always said NO. The master just urged the boy to keep practicing that one move and emphasized that he needed only that move. So the boy kept practicing the move and mastered it after a few\u00a0months.</p>\n<p>Several months later, the master took the boy to a tournament. The boy won the first round of the tournament and then the next round and the one after that. Eventually, he won the entire tournament. And surprisingly it did not prove to be very difficult for\u00a0him.</p>\n<p>The boy was baffled. How did he do\u00a0it?</p>\n<p>Curious, he asked the master how a boy with only one arm and only one move could win a karate tournament. The master smiled and told the boy that the attacking move he had mastered was one of the most difficult ones in Judo. There was only one possible defense against that move: grabbing the attacker by the right\u00a0arm.</p>\n<h3>Conclusion</h3>\n<p>So, the next time you find yourself frustrated by a personal limitation, remember: that it might just be the seed of your next superpower.</p>\n<p>Embrace it, work with it, and let it fuel your journey to excellence. After all, in the grand tapestry of life, it\u2019s often our flaws that make us truly exceptional.</p>\n<p>A big shoutout to Anam Namazi for her valuable review of this\u00a0article.</p>\n<p>If you loved reading this piece, do hit the follow button and shower some\u00a0claps.</p>\n<p>For any suggestions/feedback, write me at my email: nimitmk7@gmail.com.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c1157cca21ee\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {},
      "categories": [
        "motivation",
        "wisdom",
        "growth",
        "mindset-shift",
        "personal-development"
      ]
    },
    {
      "title": "Ocean\u200a\u2014\u200aA shadow of the universe",
      "pubDate": "2022-01-08 05:16:54",
      "link": "https://medium.com/@nimitmk7/ocean-a-shadow-of-the-universe-7cfa9d4b4f7a?source=rss-171152f24119------2",
      "guid": "https://medium.com/p/7cfa9d4b4f7a",
      "author": "Nimit Kanani",
      "thumbnail": "",
      "description": "\n<h3>Ocean\u200a\u2014\u200aA shadow of the\u00a0universe</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*Rk5VkBZxv4Nnm7Jh\"></figure><p>When I see the ocean standing from a beach, the first aspect of the ocean that startles me is its vastness. For me, this vastness is like a symbol of the infiniteness of the universe. The horizon is our limitation in perceiving and understanding this infinity.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6yEnZTNx3XvN42DT.jpg\"></figure><p>The waves educate us about the cyclical and perishable nature of things in life and the universe. Waves come and go in a repetitive fashion. It is like how circumstances of both kinds keep coming and\u00a0going.</p>\n<p>There are times of high tide when there is a lot happening. Times are uncertain and volatile, we have difficult situations as well as celebrations. There are also times of low tide when there is stability and peace. Life looks sorted. You feel comfortable.</p>\n<p>But both of them are necessary for each other\u2019s existence and\u00a0value.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*suEpPrb3hX0Baifj.jpg\"></figure><p>Come what may, the ocean keeps rumbling. The universe moves on, time does not stop for anyone. It is a reminder for us to keep moving and not get stuck in the past. Live life in the present\u00a0moment.</p>\n<p>If you loved reading this piece, do hit the follow button and shower some claps. For any suggestions/feedback, write me at my email: nimitmk7@gmail.com.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7cfa9d4b4f7a\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<h3>Ocean\u200a\u2014\u200aA shadow of the\u00a0universe</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*Rk5VkBZxv4Nnm7Jh\"></figure><p>When I see the ocean standing from a beach, the first aspect of the ocean that startles me is its vastness. For me, this vastness is like a symbol of the infiniteness of the universe. The horizon is our limitation in perceiving and understanding this infinity.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6yEnZTNx3XvN42DT.jpg\"></figure><p>The waves educate us about the cyclical and perishable nature of things in life and the universe. Waves come and go in a repetitive fashion. It is like how circumstances of both kinds keep coming and\u00a0going.</p>\n<p>There are times of high tide when there is a lot happening. Times are uncertain and volatile, we have difficult situations as well as celebrations. There are also times of low tide when there is stability and peace. Life looks sorted. You feel comfortable.</p>\n<p>But both of them are necessary for each other\u2019s existence and\u00a0value.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*suEpPrb3hX0Baifj.jpg\"></figure><p>Come what may, the ocean keeps rumbling. The universe moves on, time does not stop for anyone. It is a reminder for us to keep moving and not get stuck in the past. Live life in the present\u00a0moment.</p>\n<p>If you loved reading this piece, do hit the follow button and shower some claps. For any suggestions/feedback, write me at my email: nimitmk7@gmail.com.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7cfa9d4b4f7a\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {},
      "categories": ["universe", "life", "oceans", "philosophy", "time"]
    },
    {
      "title": "Building a Maker-checker system with audit trail",
      "pubDate": "2021-10-08 12:32:30",
      "link": "https://medium.com/hevo-data-engineering/building-a-maker-checker-system-with-audit-trail-8dd3ea9bf29d?source=rss-171152f24119------2",
      "guid": "https://medium.com/p/8dd3ea9bf29d",
      "author": "Nimit Kanani",
      "thumbnail": "",
      "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CKs_V2glZi5UtgjIa6PxlA.png\"></figure><p>Hevo is scaling rapidly, we now have 300+ customers across 40+ countries. Therefore, it has become difficult to keep up with the customers\u2019 demands. Hevo\u2019s internal teams have to increasingly execute a lot of critical customer-related operations and monitor the services provided by Hevo every\u00a0week.</p>\n<p>This gave rise to the Control Tower team. The purpose was to build tools to help the internal teams in APM(Application Performance Management) as well as executing customer-related operations. Alfred was built for executing customer-related operations like billing, account management, pipeline management, etc. across all deployments(environments) for all customer\u00a0teams.</p>\n<p>Hevo also has to ensure that these operations are executed accurately and rightfully. To prevent errors as well as incorrect use of these operations, we came up with an idea to build a maker-checker system in\u00a0Alfred.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Maker-checker\">Maker-checker</a> is an authorization workflow that ensures that at least 2 people are involved in a transaction. A Maker is responsible for making the request and a checker is responsible for approving the request. The segregation of duties in maker-checker helps keep a strict check over the use of software and\u00a0data.</p>\n<p>For keeping track of all the operations performed using maker-checker, we decided to have an audit trail of them in the application DB. An <a href=\"https://en.wikipedia.org/wiki/Audit_trail\">audit trail</a> is a series of records or events about user activities on an application. Therefore, all maker-checker requests made on Alfred are logged as well as persisted in the\u00a0DB.</p>\n<p><strong>Use case\u00a0example</strong></p>\n<p>An employee wants to execute a billing waiver operation for a customer.</p>\n<p>S/he will undertake the following steps:</p>\n<ol><li>S/he makes the request for the action with the relevant parameters and their\u00a0values.</li></ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jGlRC1fRLp4Mlblm\"></figure><p>2. S/he selects the checker for the request and specifies the purpose behind making the\u00a0request.</p>\n<p>3. The checker receives an email having details about the action and the configured parameters. The checker can either decline or accept the request via buttons available in the mail or in the past requests tab in the Alfred\u00a0app.</p>\n<p>4. A notification mail is sent to the maker regarding the outcome. i.e whether the request was accepted and executed successfully or the request was declined.</p>\n<p><strong>Detailed Flow:</strong></p>\n<p>Whenever the maker makes a request, the request details are stored in a table in the DB. The request status is marked as <strong>PENDING</strong>. An email with these details is sent to the\u00a0checker.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*57YQJGHfOwHQUKuY\"></figure><p>For the checker to accept/decline the request, he/she is required to login into the app or he/she needs to have the cookie of his/her existing login in the browser. This ensures the accept/decline action can\u2019t be undertaken by anyone except the\u00a0checker.</p>\n<p>If the checker accepts the request, it gets executed. If the execution is successful, it is marked as <strong>FINISHED</strong>. If the execution fails, it is marked as <strong>FAILED</strong>. The success/error message, status, and response data(if any) are also\u00a0stored.</p>\n<p>If the checker declines the request, the request is marked as <strong>DECLINED</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rQelqinJDZbJ64NT\"></figure><p>The accept() flow uses the <strong>Factory design pattern</strong> for determining the appropriate execution flow of the request based on the type of the request. Using the factory pattern enables us to have a single resource for handling all types of requests.</p>\n<p><strong>Other features:</strong></p>\n<ol><li>Past Requests\u00a0Tab</li></ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*DCB88cE0re4ry_Mp\"></figure><p>All users of the Alfred app can view all the past maker-checker requests with their details in this tab. These details are retrieved from the database and can be filtered on the basis of environment, team(customer), maker, checker, request types, and status. They are always ordered by the time of creation.</p>\n<p>2. Maker is allowed to cancel the request before the checker takes a decision or notify the checker if he does not respond on\u00a0time.</p>\n<p>3. In case the request is declined or fails after being accepted, the maker can make a duplicate request.</p>\n<p><strong>Next Steps</strong></p>\n<p>In order to ensure faster response from the checker, we can have an option for sending a slack notification as well when the maker makes a request along with an option of automatically resending the request notification after a fixed time duration in the case where the checker has not responded.</p>\n<p>Alfred\u2019s motivation has always been to reduce the turnaround time for any tickets or requests raised by our customers. With this in mind, we plan to build multiple dashboards that can help visualize important information depending on the particular problem. By categorizing this information at a generic problem level we hope to increase the efficiency of our support\u00a0team.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8dd3ea9bf29d\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/hevo-data-engineering/building-a-maker-checker-system-with-audit-trail-8dd3ea9bf29d\">Building a Maker-checker system with audit trail</a> was originally published in <a href=\"https://medium.com/hevo-data-engineering\">Hevo Data Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CKs_V2glZi5UtgjIa6PxlA.png\"></figure><p>Hevo is scaling rapidly, we now have 300+ customers across 40+ countries. Therefore, it has become difficult to keep up with the customers\u2019 demands. Hevo\u2019s internal teams have to increasingly execute a lot of critical customer-related operations and monitor the services provided by Hevo every\u00a0week.</p>\n<p>This gave rise to the Control Tower team. The purpose was to build tools to help the internal teams in APM(Application Performance Management) as well as executing customer-related operations. Alfred was built for executing customer-related operations like billing, account management, pipeline management, etc. across all deployments(environments) for all customer\u00a0teams.</p>\n<p>Hevo also has to ensure that these operations are executed accurately and rightfully. To prevent errors as well as incorrect use of these operations, we came up with an idea to build a maker-checker system in\u00a0Alfred.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Maker-checker\">Maker-checker</a> is an authorization workflow that ensures that at least 2 people are involved in a transaction. A Maker is responsible for making the request and a checker is responsible for approving the request. The segregation of duties in maker-checker helps keep a strict check over the use of software and\u00a0data.</p>\n<p>For keeping track of all the operations performed using maker-checker, we decided to have an audit trail of them in the application DB. An <a href=\"https://en.wikipedia.org/wiki/Audit_trail\">audit trail</a> is a series of records or events about user activities on an application. Therefore, all maker-checker requests made on Alfred are logged as well as persisted in the\u00a0DB.</p>\n<p><strong>Use case\u00a0example</strong></p>\n<p>An employee wants to execute a billing waiver operation for a customer.</p>\n<p>S/he will undertake the following steps:</p>\n<ol><li>S/he makes the request for the action with the relevant parameters and their\u00a0values.</li></ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jGlRC1fRLp4Mlblm\"></figure><p>2. S/he selects the checker for the request and specifies the purpose behind making the\u00a0request.</p>\n<p>3. The checker receives an email having details about the action and the configured parameters. The checker can either decline or accept the request via buttons available in the mail or in the past requests tab in the Alfred\u00a0app.</p>\n<p>4. A notification mail is sent to the maker regarding the outcome. i.e whether the request was accepted and executed successfully or the request was declined.</p>\n<p><strong>Detailed Flow:</strong></p>\n<p>Whenever the maker makes a request, the request details are stored in a table in the DB. The request status is marked as <strong>PENDING</strong>. An email with these details is sent to the\u00a0checker.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*57YQJGHfOwHQUKuY\"></figure><p>For the checker to accept/decline the request, he/she is required to login into the app or he/she needs to have the cookie of his/her existing login in the browser. This ensures the accept/decline action can\u2019t be undertaken by anyone except the\u00a0checker.</p>\n<p>If the checker accepts the request, it gets executed. If the execution is successful, it is marked as <strong>FINISHED</strong>. If the execution fails, it is marked as <strong>FAILED</strong>. The success/error message, status, and response data(if any) are also\u00a0stored.</p>\n<p>If the checker declines the request, the request is marked as <strong>DECLINED</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rQelqinJDZbJ64NT\"></figure><p>The accept() flow uses the <strong>Factory design pattern</strong> for determining the appropriate execution flow of the request based on the type of the request. Using the factory pattern enables us to have a single resource for handling all types of requests.</p>\n<p><strong>Other features:</strong></p>\n<ol><li>Past Requests\u00a0Tab</li></ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*DCB88cE0re4ry_Mp\"></figure><p>All users of the Alfred app can view all the past maker-checker requests with their details in this tab. These details are retrieved from the database and can be filtered on the basis of environment, team(customer), maker, checker, request types, and status. They are always ordered by the time of creation.</p>\n<p>2. Maker is allowed to cancel the request before the checker takes a decision or notify the checker if he does not respond on\u00a0time.</p>\n<p>3. In case the request is declined or fails after being accepted, the maker can make a duplicate request.</p>\n<p><strong>Next Steps</strong></p>\n<p>In order to ensure faster response from the checker, we can have an option for sending a slack notification as well when the maker makes a request along with an option of automatically resending the request notification after a fixed time duration in the case where the checker has not responded.</p>\n<p>Alfred\u2019s motivation has always been to reduce the turnaround time for any tickets or requests raised by our customers. With this in mind, we plan to build multiple dashboards that can help visualize important information depending on the particular problem. By categorizing this information at a generic problem level we hope to increase the efficiency of our support\u00a0team.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8dd3ea9bf29d\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/hevo-data-engineering/building-a-maker-checker-system-with-audit-trail-8dd3ea9bf29d\">Building a Maker-checker system with audit trail</a> was originally published in <a href=\"https://medium.com/hevo-data-engineering\">Hevo Data Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
      "enclosure": {},
      "categories": [
        "workflow",
        "authorization",
        "technology",
        "maker-checker",
        "engineering"
      ]
    }
  ]
}
